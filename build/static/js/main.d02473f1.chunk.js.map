{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","shortid","console","log","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d02473f1.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\n//con {crearCita}, extraigo por destructuring la fx de las props. Esto es lo mismo que escribir \n// props.crearCita\n\nconst Formulario = ({crearCita}) => {\n\n    const [cita, actualizarCita]= useState({\n        mascota:'',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n    })\n\n     const [error, actualizarError]= useState(false)\n\nconst actualizarState= e => {\n    actualizarCita({\n        ...cita,\n        [e.target.name]: e.target.value\n    })\n}\nconst {mascota, propietario, fecha, hora, sintomas}=cita;\n\n//validador\nconst submitCita = e =>{\n   e.preventDefault();\n\n   if(mascota.trim()===''||propietario.trim()===''||fecha.trim()==='' ||hora.trim()==='' ||sintomas.trim()==='' ){\n       actualizarError(true);\n       return;\n   }\n\n   actualizarError(false);\n\n//asignador de ID\n   cita.id=shortid();\n   console.log(cita)\n\n//cargador de cita a la db\n   crearCita(cita);\n\n//reiniciar el form\n\nactualizarCita({\n        mascota:'',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n})\n\n}\n\n    return (\n        <Fragment>\n        <h2>Crear cita</h2>\n        \n        {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> :null}\n\n        <form\n            onSubmit={submitCita}\n        >\n        <label>Nombre Mascota</label>\n        <input \n        type=\"text\"\n        name=\"mascota\"\n        className=\"u-full-width\"\n        placeholder=\"Nombre Mascota\"\n        onChange={actualizarState}\n        value={mascota}\n        />\n        \n        <label>Nombre del Dueño</label>\n        <input \n        type=\"text\"\n        name=\"propietario\"\n        className=\"u-full-width\"\n        placeholder=\"Nombre del Dueño\"\n        onChange={actualizarState}\n        value={propietario}\n        />  \n        \n        <label>Fecha</label>\n        <input \n        type=\"date\"\n        name=\"fecha\"\n        className=\"u-full-width\"\n        onChange={actualizarState}\n        value={fecha}\n        \n        />\n        \n        <label>Hora</label>\n        <input \n        type=\"time\"\n        name=\"hora\"\n        className=\"u-full-width\"\n        onChange={actualizarState}\n        value={hora}\n        />\n\n        <label>Síntomas</label>\n        <textarea\n        className=\"u-full-width\"\n        name=\"sintomas\"\n        onChange={actualizarState}\n        value={sintomas}\n        ></textarea>\n        \n        <button\n        type=\"submit\"\n        className=\"u-full-width button confirmar\"\n        >\n            Agregar Cita\n        </button>\n        </form>\n        </Fragment>\n        );\n    }\n    \n    //para averiguar por consola el tipo de info que viene en props\n    Formulario.propTypes={\n        crearCita: PropTypes.func.isRequired\n    }\n\n    export default Formulario;","import React from 'react';\n\nconst Cita = ({cita, eliminarCita}) =>  ( \n    <div className=\"cita\">\n        <p> Mascota: <span>{cita.mascota}</span></p>\n        <p> Dueño: <span>{cita.propietario}</span></p>\n        <p> Fecha: <span>{cita.fecha}</span></p>\n        <p> Hora: <span>{cita.hora}</span></p>\n        <p> Sintomas: <span>{cita.sintomas}</span></p>\n\n        <button\n        className=\"button eliminar u-full-width\"\n        //onClick: debo crearlo desde el padre, donde estoy creando el array de citas!!\n        onClick={()=> eliminarCita(cita.id)}\n        > Eliminar &times; </button>\n    </div>\n );\n\n \nexport default Cita;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita'\n\n\nfunction App() {\n\n  //1) chequear si hay citas en Local Storage:\n  //uso JSON.parse porque localStorage maneja sólo strings!\n  let citasIniciales= JSON.parse(localStorage.getItem('citas'))\n  if(!citasIniciales){\n    citasIniciales=[];\n  }\n\n  //arreglo de citas, de TODAS.\n  //si hay citasIniciales (guardadas), entonces \"citas\" se inicia con esas. Si no, inicia vacío.\n  const [citas, guardarCitas]= useState([citasIniciales]);\n\n  //si hay citas cuando arranca, almacenarlas en local storage; si no, dejarlo vacío.\n  useEffect(()=>{\n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas))\n    }else{\n      localStorage.setItem('citas', JSON.stringify([]))\n    }\n  }, [citas]);\n\n\n\n  //funcion que tome las citas actuales y agregue la nueva\n\n  const crearCita =cita =>{\n    guardarCitas([\n      ...citas,\n      cita\n    ])\n  }\n\n  //funcion que elimina una cita por su id\n//con filter, pasa las fitas NO eliminadas a un nuevo arreglo.\n//le pongo cuando NO es igual al ID porque filter me trae lo que machea con la condición. Así, guarda todo lo que NO coincida, que es lo que quiero conservar.\n\n  const eliminarCita = id =>{\n    const nuevasCitas = citas.filter(cita => cita.id !==id)\n    guardarCitas(nuevasCitas);\n  }\n\n\n  //mensaje condicional: ternario!!\n\n  const titulo = citas.length===0 ? 'No hay citas' : 'Administra tus citas'\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n            // acá le paso al form la fx de crear cita, como prompt\n            crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita=>(\n              <Cita \n              key={cita.id}\n              cita={cita}\n              eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n\n    </Fragment>\n    \n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport './style.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}